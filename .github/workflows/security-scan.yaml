name: Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # schedule:
  #   - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
permissions: 
  contents: read 
  id-token: write 
  issues: write 
  pull-requests: write
jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - uses: gitleaks/gitleaks-action@v2
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        GITLEAKS_CONFIG: gitleaks.toml

    - name: Install git-secrets
      run: |
        git clone https://github.com/awslabs/git-secrets.git
        cd git-secrets
        sudo make install
        cd ..
        rm -rf git-secrets

    - name: Configure git-secrets
      run: |
        git secrets --register-aws
        git secrets --add 'private_key'
        git secrets --add 'api_key'


    - name: Run git-secrets
      continue-on-error: true
      run: git secrets --scan


    - name: TruffleHog OSS 
      id: trufflehog 
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true 
      with: 
        base: ""
        head: ${{ github.ref_name }}
        extra_args: --debug --only-verified ï»¿

    - name: Install detect-secrets
      run: |
        python -m pip install detect-secrets

    - name: Run detect-secrets
      continue-on-error: true
      run: detect-secrets scan --all-plugins > detect-secrets-results.txt

    # - name: Install Bandit
    #   run: |
    #     python -m pip install bandit

    # - name: Run Bandit
    #   # if: inputs.language == "python" 
    #   continue-on-error: true
    #   run: bandit -r . -f custom > bandit-results.txt

    # - name: Install Safety
    #   run: |
    #     python -m pip install safety

    # - name: Run Safety
    #   # if: inputs.language == "python" 
    #   continue-on-error: true
    #   run: safety check --full-report > safety-results.txt

    - name: Install npm (for npm audit)
      run: |
        sudo apt-get update && sudo apt-get install -y npm

    - name: Run npm audit (if package.json exists)
      continue-on-error: true
      run: |
        if [ -f package.json ]; then
          npm audit --json > npm-audit-results.json
        else
          echo "No package.json found, skipping npm audit"
        fi

    - name: Manual Trivy Setup
      uses: aquasecurity/setup-trivy@v0.2.0
      with:
        cache: true
        version: v0.57.1

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        skip-setup-trivy: true

    - name: Upload scan results
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          detect-secrets-results.txt
          bandit-results.txt
          safety-results.txt
          npm-audit-results.json
          trivy-results.sarif
          trufflehog-results.json

    - name: Check for vulnerabilities
      run: |
        if [ -s detect-secrets-results.txt ] || [ -s trufflehog-results.json ] || [ -s bandit-results.txt ] || [ -s safety-results.txt ] || [ -s npm-audit-results.json ] || [ -s trivy-results.txt ]; then
          echo "Vulnerabilities found. Please check the scan results."
          exit 1
        else
          echo "No vulnerabilities found."
        fi
